1. Какие примитивные типы Java существуют, как создать переменные примитивных типов?
byte myByte = 100;  // (8 бит), диапазон от -128 до 127
short myShort = 10000;  // (16 бит), диапазон от -32,768 до 32,767.
int myInt = 100000;  // (32 бита), диапазон от -2^31 до 2^31-1
long myLong = 10000000000L;  // (64 бита), диапазон от -2^63 до 2^63-1.
    Для значений больше 32,767 используется суффикс `L` или `l`.
float myFloat = 10.5f;  // (32 бита) для значений используется суффикс `F` или `f`.
double myDouble = 20.99;  // (64 бита)
char myChar = 'A';  // (16 бит), хранит один символ Unicode
boolean myBoolean = true;


2. Объяснить процедуру, по которой переменные примитивных типов передаются в методы как параметры.
В процедуру передается только значение
public void modifyValue(int value) {
    value = value + 5; // Изменяется только копия
}
public int modifyValueReturn(int value) {
    return value + 5;  // вернется копия с другим результатом
}
int originalValue = 10;
modifyValue(originalValue);  // 10
originalValue = modifyValueReturn(originalValue);


3. Каков размер примитивных типов? Как размер примитивных типов зависит от разрядности платформы?
byte: 1 байт (8 бит)
short`**: 2 байта (16 бит)
int`**: 4 байта (32 бита)
long: 8 байт (64 бита)
float: 4 байта (32 бита)
double: 8 байт (64 бита)
char: 2 байта (16 бит) (для хранения символов UTF-16)
boolean: 1 байт (8 бит
Поскольку Java была разработана с целью обеспечивать "первый раз — на любом устройстве"
(посредством кросс-платформенной виртуальной машины Java, JVM), размеры примитивных
типов определены стандартом и остаются неизменными, вне зависимости от архитектуры платформы,
на которой выполняется программа.


4. Что такое преобразование (приведение) типов и зачем оно необходимо?
Какие примитивные типы не приводятся ни к какому другому типу.
Преобразование типов - процесс, при котором значение одного типа данных
преобразуется в значение другого типа

Необходимо для:
- позволяет выполнять операции с разными типами данных (пример, int + double).
- передавать значения других типов в соответствующие методы.

Примитивные типы, которые не приводятся к другим типам
boolean: содержит true false
char: может быть неявно приведен к int, не может быть неявно приведен к boolean


5. Объяснить, что такое явное и неявное приведение типов, привеcти примеры,
когда такое преобразование имеет место.
Неявное происходит автоматически
int myInt = 100;
long myLong = myInt; // int автоматически преобразуется в long

Явное указывается программистом
long myLong = 100L;
int myInt = (int) myLong; // требует явного приведения, так как long больше, чем int


6. Что такое литералы в Java-программе? Дать описание классификации литералов.
Литералы в Java — это фиксированные значения, которые прямо записываются в исходном
коде программы. Они представляют собой конкретные данные и могут быть различных типов,
таких как числа, символы, строки и логические значения. Литералы используются для
инициализации переменных и передачи значений в методы и конструкции.
Классификация:
Целочисленные литералы (Integer Literals)
Литералы с плавающей запятой (Floating-point Literals)
Символьные литералы (Character Literals)
Строковые литералы (String Literals)
Логические литералы (Boolean Literals)
Нулевой литерал (Null Literal)


7. Как записываются литералы различных видов и типов в Java-программе?
**Целочисленные литералы** (Integer Literals):
- Используются для представления целых чисел.
- Могут быть записаны в десятичной, восьмеричной, шестнадцатеричной или двоичной системах счисления.
- Десятичные: `123`, `456`
- Восьмеричные (начинаются с `0`): `0123`
- Шестнадцатеричные (начинаются с `0x` или `0X`): `0x1A3F`
- Двоичные (начинаются с `0b` или `0B`): `0b1010`

**Литералы с плавающей запятой** (Floating-point Literals):
- Представляют дробные числа.
- Записываются с использованием десятичной точки или в экспоненциальной форме.
- Пример: `3.14`, `0.001`, `2.5e3` (что означает 2.5 × 10³)

**Символьные литералы** (Character Literals):
- Представляют одиночные символы и заключены в одинарные кавычки.
- Пример: `'A'`, `'1'`, `'#'`.
- Литералы также могут представлять специальные символы (например, перенос строки `'\n'`, табуляцию `'\t'`).

**Строковые литералы** (String Literals):
- Представляют последовательности символов и заключены в двойные кавычки.
- Пример: `"Hello, World!"`, `"Java"`.

**Логические литералы** (Boolean Literals):
- Представляют логические значения и могут принимать только значения `true` или `false`.

**Нулевой литерал** (Null Literal):
- Представляет специальное значение `null`, которое указывает на отсутствие значения или объекта.
- Пример: `String str = null;`


8. Как осуществляется работа с типами при вычислении арифметических выражений в Java?
Если один из операндов является более широким типом (например, `double` или `long`),
Java автоматически преобразует другие операнды к этому типу.
int a = 5;
double b = 4.5;
double result = a + b;  // 'a' будет преобразован в 'double'


9. Что такое классы-оболочки, для чего они предназначены? Что значит: объект
класса оболочки — константный объект.
(wrapper-классы) из пакета java.lang: Boolean, Character, Integer, Byte, Short, Long, Float, Double.
Объект любого из этих классов представляет собой экземпляр класса в
динамической памяти, в котором хранится его неизменяемое значение.
Значения базовых типов хранятся в стеке и не являются объектами.

Что касается выражения "объект класса оболочки — константный объект",
это обычно подразумевает, что объекты класса-оболочки имеют неизменяемое (immutable)
состояние. Например, объект класса `Integer` не может быть изменен после его создания.
Все операции, которые могли бы изменить значение, на самом деле создают новый объект,
а не изменяют текущий. Это означает, что после создания объекта `Integer` с
определенным значением, это значение не может быть изменено.


10. Объяснить разницу между примитивными и ссылочными типами данных.
Пояснить существующие различия, при передаче параметров примитивных
и ссылочных типов в методы. Объяснить, как константные объекты
ведут себя при передаче в метод.
Примитивные типы данных
- Определение: Примитивные типы представляют собой простые значения и
не являются объектами. Они включают в себя такие типы,
как `int`, `char`, `boolean`, `float`, `double`, `byte`, `short` и `long`.
- Хранение: Значения примитивных типов хранятся непосредственно
в памяти (в стеке, если это локальная переменная).
- Не имеют методов: Примитивные типы не имеют методов, так как они не являются объектами.
- Неизменяемость: Примитивные типы по своей природе являются неизменяемыми,
вместо этого создается новое значение.

Ссылочные типы данных
- Определение: Ссылочные типы представляют собой объекты и включают
в себя классы, интерфейсы, массивы и т.д. Примеры включают
`String`, `ArrayList`, `HashMap` и т.д.
- Хранение: Ссылочные типы хранят ссылки на объекты, которые
находятся в области памяти, называемой кучей. Переменная ссылочного
типа содержит адрес объекта, на который она ссылается.
- Имеют методы: Ссылочные типы могут иметь методы, с которыми можно работать,
так как они являются объектами.
- Изменяемость: В отличие от примитивов, ссылки могут изменять состояние объекта,
на который они ссылаются, если класс не является неизменяемым.

При передаче примитивного типа в метод происходит инициализация другой
переменной с переданными значением.

При передаче ссылочного типа передается ссылка на объект и изменения,
внесенные в объект внутри метода, отразятся и на объекте снаружи.


11. Перечислить известные арифметические, логические и битовые операторы,
определить случаи их употребления. Что такое приоритет оператора,
как определить, в какой последовательности будут выполняться операции
в выражении, если несколько из них имеют одинаковый приоритет.
По приоритету:
() [] - высший
++ -- ~ !
* / %
+ -
>> >>> <<
> >= < <=
==
&
^
|
&&
||
?:
=
op=
В случаях с арифметическими операциями имеющими одинаковый приоритет, выполнение
будет слева направо (+, -, *, /)
Операторы присваивания и тернарный (=, ?:) выполняются справаы налево


12. Какие правила выполнения операций с плавающий точкой в Java? Как определить,
что результатом вычисления стала бесконечность или «нечисло»?
Для чисел с плавающей точкой лучше использовать тип класса-оболочки Float или Double
в зависимости от требуемой точности. Т.к. примитивные типы float и double имеют
некоторую погрешность, связанную с машинным представлением числа.
Infinity - результат деления положительного числа на ноль
Infinity (отрицательная бесконечность) — результат деления отрицательного числа на ноль.
NaN (Not a Number) — используется для представления неопределённых или недопустимых значений, таких как 0.0 / 0.0 или √(-1).
Для определения используются Double.isInfinite() или Float.isInfinite():
    double result = 1.0 / 0.0; // Это приведет к бесконечности
    if (Double.isInfinite(result)) {
       System.out.println("Результат равен бесконечности.");
    }

Или для проверки на NaN методы Double.isNaN() и Float.isNaN():
    double result = 0.0 / 0.0; // Это приведет к NaN
       if (Double.isNaN(result)) {
           System.out.println("Результат - нечисло (NaN).");
       }


13. Что такое аutoboxing и unboxing? Принцип действия на примерах.
Автораспаковка — процесс извлечения из объекта-оболочки значения базового типа.
    Integer i = 420; // autoboxing
    ++i; // unboxing + operation + autoboxing
    int j = i; // unboxing

    int i = 128;
    Integer a = i; // autoboxing
    Integer b = i;
    System.out.println("a==i " + (a == i)); // true – unboxing and comparing value


14. Что такое var? Можно ли переменной или методу дать имя var? Достоинства и недостатки.
var — это ключевое слово в Java, введенное в версии 10 (релиз 2018 года),
которое позволяет использовать локальную типовуютInference при объявлении переменных.
С помощью `var` компилятор автоматически выводит тип переменной
на основе присвоенного значения.
Да, можно переменной или методу дать имя var, так как var не является ключевым словом, но нежелательно.
Достоинства:
-Упрощение кода
-Улучшение поддержки анонимных типов
-Гибкость , то есть код менее загроможденн
Недостатки:
-Потеря ясности типов
-Ограниченная область применения может использоваться только для локальных переменных;
нельзя использовать его для полей класса,
параметров методов или возвращаемых значений методов.
-Не поддерживает во всех случаях, когда для сложных выражений, когда
присвоение происходит позднее, может возникнуть ситуация, когда тип не будет очевиден
-Не поддерживается со сложными и неочевидными типами: если тип переменной
объявляется с помощью выражения, где тип не очевиден, это может привести к неявной ошибке


15. Объяснить работу операторов if, switch, while, do-while, for, for-each.
Написать корректные примеры работы этих операторов.
if Оператор условного перехода
    if (boolean_value) {
     // line 1: main success scenario
    } else {
     // line 2: scenario variation
    }
switch оператор множественного выбора
    switch(value) {
     case const1:
     // code 1
     break; // not required
     ...
     case constN:
     // code N
     break; // not required
     default:
     // code
    }
Цикл с предусловием — while (boolean_value) { /* code */ }
Цикл с постусловием — do { /* code */ } while (boolean_value);
Цикл с параметром — for (expression_1; boolean_value; expression_3) { /* code */ }
for-each перебор элементов: for (int num: numbers) { /* code */}


16. Объяснить работу оператора instanceof. Что будет результатом работы оператора,
если слева от него будет стоять ссылка, равная null?
Оператор `instanceof` используется для проверки, является ли объект
экземпляром определенного класса или одного из его подклассов.

Если ссылка, находящаяся слева от оператора `instanceof`, равна `null`,
то результат выполнения выражения всегда будет `false`, независимо от типа,
указанного справа от оператора. Это связано с тем, что `null` не является
экземпляром любого класса и не может быть приведен к другому типу.


17. Дать определение массиву. Как осуществляется индексация элементов массива.
Как необходимо обращаться к i-му элементу массива?
Массив - это структура данных, которая позволяет хранить
фиксированный набор значений одного типа.
Индексация начинается с нуля до n-1, где n это length массива
arrayName[i]


18. Привести способы объявления и инициализации одномерных и двумерных
массивов примитивных и ссылочных типов. Чем отличаются массивы примитивных и ссылочных типов?
Одномерные
    intArray = new int[5];  // массив примитивного типа int из 5 элементов
    int[] intArray2 = new int[]{1, 2, 3, 4, 5};
    String[] stringArray2 = new String[]{"Hello", "World", "!"};  // массив ссылочного типа
Двумерные
intMatrix = new int[3][4];
String[][] stringMatrix = new String[2][2];
Массив примитивного типа хранит значения, а ссылочного хранит ссылки на объекты.
У примитивных типов есть default значение, а если не проинициализировать массив ссылочного типа,
то все элементы будут равны null.


19. Объяснить, что представляет собой двумерный массив в Java, что такое
«массив массивов». Как узнать количество строк и количество элементов
в каждой строке для «массива массивов»?
Двумерный массив хранит данные в виде таблицы, состоящей из строк и столбцов.
«массив массивов» означает, что каждая строка в двумерном массиве на самом деле является отдельным одномерным массивом
    int numberOfRows = arrayOfArrays.length; // количество строк
    for (int i = 0; i < numberOfRows; i++) {
        int num_columns = arrayOfArrays[i].length;  // количество столбцов
        System.out.println("Количество элементов в строке: " + num_columns);
    }


20. Объяснить ситуации, когда в коде Java могут возникнуть следующие
исключительные ситуации java.lang.ArrayIndexOutOfBoundsException и java.lang.ArrayStoreException
java.lang.ArrayIndexOutOfBoundsException - доступ к элементу массива с недопустимым индексом
(индекс больше размера массива или индекс отрицательный)
java.lang.ArrayStoreException - попытка сохранить объект неправильного типа в массиве


