1. Что имеется в виду, когда говорится: Java-язык программирования и Java-платформа?
Java-язык программирования относится к синтаксису и правилам, которые используются для написания программ.

Java-платформа относится к технологии, обеспечивающей выполнение и поддержку этих программ.
Состоит из JVM, JRE, JDK.


2. Расшифровать аббревиатуры JVM, JDK и JRE. Показать, где они физически расположены и что собой представляют.
- Java Virtual Machine (JVM): Это виртуальная машина, которая выполняет байт-код, созданный компилятором Java
и управляет такими функциями, как сборка мусора и безопасность.
Физическое расположение:
JVM обычно поставляется вместе с JRE и представляет собой неотъемлемую его часть.
Она физически устанавливается на вашем компьютере как компонент Java Runtime Environment.
JVM может также быть встроенной в приложения, которые могут выполнять Java-код.
Что собой представляет:
JVM является абстракцией - предоставляет платформо-независимую среду, в которой Java-программы могут выполняться.
Поддержка различных платформ осуществляется через реализацию JVM для каждой платформы
(например, Windows, Linux, macOS и др.).

- Java Runtime Environment (JRE): Это набор программных средств, необходимых для запуска Java-приложений.
JRE включает в себя JVM, библиотеки Java, инструменты для поддержки Java-программ и необходимые API.
Физическое расположение:
JRE устанавливается на вашем компьютере как отдельный пакет
Он находится в соответствующей директории на вашем компьютере после установки Java,
например, `C:\Program Files\Java\jre1.8.0_281\` на Windows или `/usr/lib/jvm/java-8-openjdk-amd64/` на Linux.
Что собой представляет:
JRE обеспечивает все необходимые компоненты для выполнения Java-приложений,
но не включаетинструменты для разработки.
Это идеальная среда для пользователей, которые хотят только запускать Java-программы, но не разрабатывать их.

- Java Development Kit (JDK): Это инструмент для разработки программ на языке Java.
Он включает в себя компилятор (javac), а также инструменты для отладки, документации и выполнения программ.
Физическое расположение:
JDK устанавливается как отдельный пакет, обычно в
директорию `C:\Program Files\Java\jdk1.8.0_281\` на Windows
или `/usr/lib/jvm/java-8-openjdk-amd64/` на Linux.
JRE и JVM также входят в состав JDK, таким образом, установка JDK устанавливает и JRE.
Что собой представляет:
JDK является полным набором инструментов, необходимых для разработки Java-программ.
Он предоставляет функции, которые позволяют компилировать, отлаживать и запускать Java-приложения,
что делает его необходимым для разработчиков.


3. JVM-JDK-JRE. Кто кого включает и как взаимодействуют.
JDK → включает JRE → включает JVM.
JDK предназначен для разработки, JRE — для выполнения, а JVM — для выполнения байт-кода.


4. Как связаны имя Java-файла и классы, которые в этом файле объявляются?
Публичный класс должен находиться в файле с таким же именем,
тогда как непубличный класс может находиться в файле с любым именем,
но по умолчанию он будет виден только в пределах своего пакета.
Это правило помогает компилятору упорядочить и структурировать код,
облегчая его поддержание и читаемость.


5. Как скомпилировать и запустить класс, используя командную строку?
Создать класс. Внутри описать функцию public static void main(String[] args)
в CMD перейти в директорию файла и выполнить команду компиляции
javac Class_name.java
Если компиляция успешно, в текущей директории будет создан файл
`Class_name.class` (файл байт-кода).
Запуск Java-класса командой
java Class_name


6. Что такое classpath? Зачем в переменных среды окружения прописывать
пути к установленному JDK?
Classpath — это параметр, который указывает Java Virtual Machine (JVM) и Java-компилятору,
где искать пользовательские классы и пакеты при выполнении Java-программ или компиляции Java-кода.
Classpath может включать в себя один или несколько каталогов, JAR-файлы или ZIP-файлы,
куда помещены необходимые для работы программы классы и библиотеки.
-Упрощение доступа:
Установив пути к JDK в переменной окружения `PATH`,
можно запускать команды `java`, `javac` и другие инструменты JDK из любой
точки командной строки, не указывая полный путь к исполняемым файлам JDK.

-Управление Classpath:
В некоторых случаях может потребоваться установить переменную окружения`CLASSPATH`,
чтобы указать дополнительные каталоги или JAR-файлы, которые JVM и `javac`
должны использовать для поиска классов. Если в Classpath не будет указано
местоположение необходимых библиотек, вы можете столкнуться с ошибками, такими
как `ClassNotFoundException`.

-Стандартные библиотеки:
В переменной окружения `CLASSPATH` может быть указано местоположение
стандартных Java-библиотек (например, `rt.jar`), которые используются JVM.
Хотя обычно это не требуется, так как это уже предусмотрено, но иногда может
быть полезно явно указывать путь к этим библиотекам, особенно в сложных проектах.

7. Если в classpath есть две одинаковые библиотеки (или разные версии одной
библиотеки), объект класса из какой библиотеки создастся?
Во время инициализации JVM происходит поиск классов,
и если несколько JAR-файлов содержат один и тот же класс (или несколько
JAR-файлов с разными версиями одного и того же класса), JVM будет загружать
класс из первого найденного JAR-файла, который содержится в classpath.
Это означает, что порядок, в котором JAR-файлы указаны в classpath,
имеет значение. Первый файл с нужным классом "побеждает", и именно
из него будет создаваться объект.

Если у вас разные версии одной библиотеки (например, `library-v1.jar` и
`library-v2.jar`), и вы добавили их обе в classpath, то JVM будет
загружать классы из библиотеки, которая появится первой в classpath.


8. Объяснить различия между терминами «объект» и «ссылка на объект».
Объект это экземпляр класса, который занимает место в памяти. Ссылка это переменная
которая содержит адрес на объект в памяти.


9. Какие области памяти использует Java для размещения простых типов,
объектов, ссылок, констант, методов, пул строк и т.д.
- Стек (Stack): локальные переменные и ссылки. Память в стеке организована как LIFO.
Переменные удаляются из стека при выходе из блока, в котором они были объявлены.
- Куча (Heap): объекты (включая массивы) и их экземпляры. Ссылки на эти объекты могут находиться в стеке.
Управляется через сборщик мусора.
- Постоянная область (Permanent Generation / Metaspace): метаданные классов и методов.
Эта память неявно не управляется сборщиком мусора и может увеличиваться, если необходимо.
- Пул строк: специальная область в куче, где хранятся строковые литералы.
Строки в пуле не подвержены сборке мусора, если на них есть ссылки.
- Метод Area (Method Area): данные о методах, в том числе их байт-код, статические переменные и константы.
Эту область памяти иногда совмещают с постоянной областью.
- Область внешних ресурсов: каталоги, файлы и другие ресурсы, подключаемые к приложению.


10. Почему метод main() объявлен как public static void?
- public модификатор доступа, выполняет доступность метода для JVM
- static не требует экземпляра класса, чтобы быть вызваным.
- void возвращаемый тип ничего не возвращает, ведь Метод `main()` используется исключительно для запуска программы и выполнения кода.


11. Возможно ли в сигнатуре метода main() поменять местами слова static
и void?
Нет, это нарушает грамматику языка, модификатор должен быть до возвращаемого типа.


12. Будет ли вызван метод main() при запуске приложения, если слова static
или public отсутствуют?
Нет, без public JVM не увидит метод,
без static нельзя вызвать метод без предварительного создания экземпляра класса.


13. Классы какого пакета импортируются в приложение автоматически?
Импорт из пакета `java.lang`
System: содержит методы для стандартного ввода/вывода, например, `System.out.println()`.
String: используется для работы с текстовыми строками.
Math: содержит математические функции, такие как `Math.sqrt()`, `Math.random()`.
Object: корневой класс для всех классов в Java.
Integer, Double, и другие обертки для примитивных типов, включая методы для преобразования и работы с числами.
